(()=>{"use strict";var n={};({424:function(n,e){var o=this&&this.__awaiter||function(n,e,o,t){return new(o||(o=Promise))((function(r,i){function s(n){try{c(t.next(n))}catch(n){i(n)}}function a(n){try{c(t.throw(n))}catch(n){i(n)}}function c(n){var e;n.done?r(n.value):(e=n.value,e instanceof o?e:new o((function(n){n(e)}))).then(s,a)}c((t=t.apply(n,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const t=(n,e)=>{var o;console.log("Updating .vimrc to",n);const t=["insert","visual","normal"];for(const n of t)e.mapclear(n);const r=n.split("\n");let i=0;for(const n of r){i++;let t=n;if(t=t.replace(/^\s+/,""),t=t.replace(/^\s*["][^"]*$/,""),t=t.replace(/[\r]$/,""),""===t)continue;const r=/^\s*(i|n|v|)(map|noremap)\s+(\S+)\s+(.+)$/,s=/^\s*(i|n|v|)(unmap)\s+(.*)$/,a=null!==(o=r.exec(t))&&void 0!==o?o:s.exec(t);if(!a)throw console.error("line: %s. Run window.testVimrcCommand(line) to try matching a command.",t),window.testVimrcCommand=n=>{var e;return null!==(e=r.exec(n))&&void 0!==e?e:s.exec(n)},new Error(`Unknown command on line ${i}: ${n}`);const c=a[1],l=a[2],m=a[3],u=a[4],d=[];if(""===c)d.push("insert","normal","visual");else if("i"===c)d.push("insert");else if("v"===c)d.push("visual");else{if("n"!==c)throw new Error(`Invalid mode on line ${i}: ${c}`);d.push("normal")}for(const n of d){switch(l){case"map":e.map(m,u,n);break;case"unmap":e.unmap(m,n);break;case"noremap":e.noremap(m,u,n)}console.log("Processing: cmd(%s), from(%s), to(%s), mode(%s). %s: %s",l,m,u,n,"from line",t)}}};e.default=n=>({plugin:e=>{var r,i;o(void 0,void 0,void 0,(function*(){const o=yield n.postMessage({kind:"get-vimrc"});try{t(o,e.Vim)}catch(n){console.error(n),alert(n)}})),r=n=>{if("set-vimrc"!==n.kind)throw new Error("Invalid message!");t(n.content,e.Vim)},i=n.postMessage,o(void 0,void 0,void 0,(function*(){for(;;){const n=yield i({kind:"set-callback"});if("string"==typeof n)throw new Error(`Invalid callback result: ${n}`);r(n)}}))}})}})[424](0,n),exports.default=n.default})();